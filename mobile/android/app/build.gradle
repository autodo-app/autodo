def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keyPropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keyPropertiesFile.exists()) {
    keyPropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}
def key_alias = keystoreProperties.getProperty('keyAlias')
if (key_alias == null) {
    key_alias = System.getenv("KEY_ALIAS")
}
def key_password = keystoreProperties.getProperty('keyPassword')
if (key_password == null) {
    key_password = System.getenv("KEY_PASSWORD")
}
def store_file_path = keystoreProperties.getProperty('storeFile') // wrap this in file()
def store_file = ""
if (store_file_path == null) {
    store_file = file(System.getenv("STORE_FILE"))
} else {
    store_file = file(store_file_path)
}
def store_password = keystoreProperties.getProperty('storePassword')
if (store_password == null) {
    store_password = System.getenv("STORE_PASSWORD")
}

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId 'com.autodo.autodo'
        minSdkVersion 23
        targetSdkVersion 28
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias key_alias
            keyPassword key_password
            storeFile store_file
            storePassword store_password
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            shrinkResources false
            minifyEnabled true

            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
